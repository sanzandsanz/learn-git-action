name: Work with Cache Dependencies
on:
  push:
    branches:
      - main
    paths-ignore:
      - ".github/workflows/**"
  workflow_dispatch: # Allow manual triggering of the workflow
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Dependencies # Caching node_modules so that if other jobs try to install dependencies, they can use the cached version
        uses: actions/cache@v4 # https://github.com/actions/cache/
        with:
          path: ~/.npm # Cache npm dependencies
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }} # Use package-lock.json to create a unique cache key. When the nuget package is uploaded, the has key will update so you will get the latest one from cache

      - name: Install Dependencies # npm ci will install dependencies from package-lock.json
        run: npm ci

      - name: Run Tests # Assuming you have a test script defined in package.json
        run: echo "Running tests..."

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Dependencies # Caching node_modules so that if other jobs try to install dependencies, they can use the cached version
        uses: actions/cache@v4 # https://github.com/actions/cache/
        with:
          path: ~/.npm # Cache npm dependencies
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }} # Use package-lock.json to create a unique cache key. When the nuget package is uploaded, the has key will update so you will get the latest one from cache

      - name: Install Dependencies # npm ci will install dependencies from package-lock.json
        run: npm ci

      - name: Create Artifact files # Assuming the build command generates files in the 'dist' directory
        run: npm run build

      - name: Upload Artifact # Upload the generated files as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: deploy-artifact
          path: dist/

  deploy: # This job will run after the build job
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: deploy-artifact
      - name: Deploy Application # Replace with your deployment command
        run: echo "Deploying application..." # Replace with actual deployment command
